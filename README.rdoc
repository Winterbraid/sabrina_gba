= Sabrina

{<img src="http://inch-ci.org/github/Winterbraid/sabrina_gba.svg?branch=master"/>}[http://inch-ci.org/github/Winterbraid/sabrina_gba]
{<img src="https://codeclimate.com/github/Winterbraid/sabrina_gba/badges/gpa.svg"/>}[https://codeclimate.com/github/Winterbraid/sabrina_gba]

A library for manipulating GBA ROMs of a popular monster collection RPG series.
It is written entirely in Ruby and uses
{Chunky PNG}[https://github.com/wvanbergen/chunky_png], which is also a pure
Ruby library. Compared to the many excellent GUI tools available, Sabrina
focuses on non-interactive manipulation of ROM data.

Source code:: https://github.com/Winterbraid/sabrina_gba
Gem:: https://rubygems.org/gems/sabrina
Documentation:: http://rubydoc.info/gems/sabrina/frames

== Example use

=== Basic usage

  require 'sabrina'

  include Sabrina

  r = Rom.new "Decap and Attack Rombase 1.5.gba"
  # => MrDollSteak's Decap and Attack Rombase [MrDS]

  m = Monster.new r, 36
  # => 36. Clef/name redacted/

  m.stats.to_json
  # {
  #   "36": {
  #     "stats": {
  #       "hp": 95,
  #       "attack": 70,
  #       "defense": 73,
  #       "speed": 60,
  #       "sp_atk": 85,
  #       "sp_def": 90,
  #       "type_1": "23 (Fairy)",
  #       "type_2": "23 (Fairy)",
  #       "catch_rate": 25,
  #       "exp_yield": 129,
  #       "ev_yield": {
  #         "hp": 3
  #       },
  #       /output truncated/
  #     }
  #   }
  # }

  m.save_spritesheet
  # => #<File:Decap and Attack Rombase 1.5_files/036.png (closed)>

  r.close # => 0

=== Copy sprites between ROMs

  require 'benchmark'
  require 'sabrina'

  include Sabrina

  r1 = Rom.new 'Moemon FireRed (1.5).gba'
  r2 = Rom.new 'Ruby (E).gba'

  puts "Copying sprites from #{r1} to #{r2}."

  b = Benchmark.measure do
    (1..414).each do |i|
      m = Monster.new r1, i
      print "#{ m.to_s.ljust(20, ' ') }\r"
      m.rom = r2
      m.write_spritesheet
    end
  end

  r1.close
  r2.close

  puts "\nTook #{b.real} seconds."

== Sabrina is...

<b>...a backend.</b> The main purpose of the library is to be used inside
other programs. That said, Ruby comes packaged with a robust interactive
interpreter in the form of +irb+, and the classes and methods of Sabrina are
intended to be human-friendly enough to easily perform many tasks from the +irb+
prompt with even a rudimentary knowledge of Ruby.

<b>...reasonably quick.</b> While Ruby is not the speediest language out there,
Sabrina employs internal caching to avoid certain costly operations when
possible. This design particularly shines in the use case of copying data
between two ROMs, where Sabrina should always be faster than a tool that relies
on temporary HDD files or multiple program instances.

<b>...extensible.</b> ROM types should be recognized automatically, and adding
support for new ROM bases is as simple as dropping a JSON file in ~/.sabrina
(assuming the ROM uses a unique ID). The code is designed to allow easy
addition of data abstractions, which means new features should arrive at
a reasonable pace.

<b>...mostly clean.</b> The library itself is warning-free (any warnings
produced with the -w switch come from ChunkyPNG). Adherence to the
{Ruby Style Guide}[https://github.com/bbatsov/ruby-style-guide], while not
strict, is kept at what is perceived to be a reasonable level.

== Sabrina is not...

<b>...complete.</b> Currently the Monster class provides an abstraction for
dealing with monster data, and handlers exist for sprites and base stats.
Adding support for other monster-related data sets such as evolutions or dex
entries is a high priority, after which moves and items may be looked
at.

<b>...a user interface.</b> It comes with no GUI or CLI in the traditional
sense, and it is unlikely one will be included. However, scripts are in
the works that should cover many common use cases and provide inspiration for
advanced users to write their own.

<b>...a backup manager.</b> In accordance with the above, all write
operations will be performed directly on the ROM, without waiting for a
separate save command, and there is no undo feature. Therefore, it is the
user's responsibility to maintain backups of ROM files.

<b>...a limit remover/table expander.</b> If you need those, you should try
{G3HS}[https://github.com/thekaratekid552/Secret-Tool/], look for a premade
expanded ROM base, or refer to a tutorial. However, Sabrina does try to make as
few assumptions about limits as possible, so expanded ROMs should be supported
out of the box (although custom IDs and config files might be required if
table offsets have been changed).

== Known issues

* The Lz77 module will need to be refactored eventually.
* Some long classes could do also with refactoring. Rom, Sprite, Palette and
  Moveset are primary suspects.
* Either the Lz77 compressor or the image encoder has a problem with the monster
  no. 360 for some reason. Copying from another ROM still works fine (likely
  because it bypasses the encoding step and uses the data from the source ROM
  directly), but loading from PNG will result in garbled sprites for forms 3-4.
* Due to some inaccuracies in the Lz77 decompressor, reliably measuring the
  size of the original compressed data on the ROM seems impossible as of present.
  For that reason, the current version will not wipe old lz77 data upon rewrites,
  which may lead to ROM bloat over time. It is recommended to write to clean ROM
  bases whenever possible.

Currently missing features include:
* Support for Sapphire and LeafGreen.
* Support for additional data abstractions beyond sprite sheets and stats may be
  included depending on resources and feedback.
* Support for moves.
